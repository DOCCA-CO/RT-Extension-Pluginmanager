#!/usr/bin/perl

##use strict;
use lib "/opt/rt4/lib";
use lib "/opt/rt4/local/lib";

use RT;
use RT::Interface::CLI qw(CleanEnv GetCurrentUser);

#CleanEnv();
RT::LoadConfig();
RT::Init();

use RT::Search::FromSQL;
use XML::Simple;
use LWP::Simple;

## use File::Path;
use File::Slurp qw( read_dir overwrite_file );
use File::Spec::Functions qw( catfile );
use File::Basename qw ( basename );
use POSIX qw(strftime);
use Time::Local;

use RT::Queue;
use RT::Ticket;
use RT::CustomField;

use JSON;

my $json;

my ($remoteKey, $remoteAction) = @ARGV;
unless ($remoteKey) {
	die "Usage: $0 PluginName\n";
}

{
	local $/; #Enable 'slurp' mode
	open my $fh, "<", "/tmp/catalogue.json";
	$json = <$fh>;
	close $fh;
}

my $CurrentUser = $RT::SystemUser;
my $ref = from_json($json);
my @catalogue = @{ $ref->{'plugin'} };

my ($val, $msg) = CreateTicket($CurrentUser, $remoteKey, @catalogue); 

if ($val == 0) {
	print "$msg\n";
} else {
	print "The \'$remoteKey\' plugin is put in queue for installation.";
}

sub CreateTicket {
	my ($CurrentUser, $PluginName, @cat) = @_;
	my $Queue = "_Pluginmanager";
	my $ticketObj = RT::Ticket->new($CurrentUser); # empty ticket object

	my ($item) = grep {
		lc($_->{name}) eq lc($PluginName)
	} @cat;

	return (0, 'No plugin found') unless ($item);

	my $pl = $item->{link};
	my $nm = '';
	if (index($pl, '/pod/') >= 0) {
		## In case of cpanm
		my $idx = index($pl, '/pod/') + 5;
		$nm = substr $pl, $idx;
		$nm =~ s/::/-/ig;
	} else {
		## In case of zip, tar.gz
		($nm = $pl) =~ s/^.*\///;
		$nm = substr $nm, 0, index( $nm, q{.} ) ;##  =~ s/\.[^.]+$//;
	}
	my %args = (
		Queue => $Queue,
		Requestor => 'nobody',
		Subject => $nm,
		Priority => 10,
		InitialPriority => 0,
	);

	my ($val, $msg) = $ticketObj->Create(%args);

	if ($val) {
		$ticketObj->SetStatus('stalled');
		$ticketObj->Comment(Content => $nm);
		my $cfObj = RT::CustomField->new($CurrentUser);
		$cfObj->Load('_mp_PluginName');
		$ticketObj->AddCustomFieldValue(Field => $cfObj->Id, Value => $nm);

		$cfObj->Load('_mp_LinkToDownload');
		$ticketObj->AddCustomFieldValue(Field => $cfObj->Id, Value => $pl);
		$cfObj->Load('_pm_Config');
		$ticketObj->AddCustomFieldValue(Field => $cfObj->Id, Value => $item->{config});
		$cfObj->Load('_pm_ConfigChanged');
		$ticketObj->AddCustomFieldValue(Field => $cfObj->Id, Value => '1');
		$cfObj->Load('_mp_ImmidiateInstall');
		$ticketObj->AddCustomFieldValue(Field => $cfObj->Id, Value => '1');
	}
	return ($val, $msg);
}
